{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport axios from 'axios';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Search = function (_React$Component) {\n  _inherits(Search, _React$Component);\n\n  var _super = _createSuper(Search);\n\n  function Search(props) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      cities: [],\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"render\",\n    value: function render() {\n      console.log('RENDER');\n      return _jsxs(View, {\n        style: styles.main_container,\n        children: [_jsx(Text, {}), _jsx(FlatList, {\n          data: this.state.city,\n          keyExtractor: function keyExtractor(item) {\n            return item.insee;\n          },\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item;\n            return _jsx(CityDescription, {\n              city: item\n            });\n          }\n        }), this._displayLoading()]\n      });\n    }\n  }, {\n    key: \"_searchTextInputChanged\",\n    value: function _searchTextInputChanged(text) {\n      this.searchedText = text;\n    }\n  }, {\n    key: \"_loadCities\",\n    value: function _loadCities() {\n      var _this2 = this;\n\n      if (this.state.isLoading) return;\n\n      if (this.searchedText.length > 0) {\n        this.setState({\n          isLoading: true\n        });\n        getPOkemonFromApi(this.searchedText).then(function (data) {\n          _this2.setState({\n            city: data.city,\n            isLoading: false\n          });\n\n          _this2.setState({\n            ephemeride: data.ephemeride,\n            isLoading: false\n          });\n\n          console.log(JSON.stringify(data, undefined, true));\n        });\n      }\n    }\n  }, {\n    key: \"_displayLoading\",\n    value: function _displayLoading() {\n      if (this.state.isLoading) {\n        return _jsx(View, {\n          style: styles.loading_container,\n          children: _jsx(ActivityIndicator, {\n            size: \"large\"\n          })\n        });\n      }\n    }\n  }]);\n\n  return Search;\n}(React.Component);\n\nexport default Search;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/RABECLEG.Charles/Documents/ReactNative/pokemonAPI/App.js"],"names":["StatusBar","axios","Search","props","state","cities","isLoading","console","log","styles","main_container","city","item","insee","_displayLoading","text","searchedText","length","setState","getPOkemonFromApi","then","data","ephemeride","JSON","stringify","undefined","loading_container","React","Component","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;;;IA4BMC,M;;;;;AAyBJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,SAAS,EAAE;AAFA,KAAb;AAFiB;AAOlB;;;;WA5BD,kBAAS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,cAApB;AAAA,mBACE,KAAC,IAAD,KADF,EAQE,KAAC,QAAD;AACE,UAAA,IAAI,EAAE,KAAKN,KAAL,CAAWO,IADnB;AAEE,UAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,mBAAUA,IAAI,CAACC,KAAf;AAAA,WAFhB;AAGE,UAAA,UAAU,EAAE;AAAA,gBAAGD,IAAH,QAAGA,IAAH;AAAA,mBAAc,KAAC,eAAD;AAAiB,cAAA,IAAI,EAAEA;AAAvB,cAAd;AAAA;AAHd,UARF,EAaE,KAAKE,eAAL,EAbF;AAAA,QADF;AAkBD;;;WAWD,iCAAwBC,IAAxB,EAA8B;AAC5B,WAAKC,YAAL,GAAoBD,IAApB;AACD;;;WAIF,uBAAc;AAAA;;AACX,UAAI,KAAKX,KAAL,CAAWE,SAAf,EAA0B;;AAC1B,UAAI,KAAKU,YAAL,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,aAAKC,QAAL,CAAc;AAAEZ,UAAAA,SAAS,EAAE;AAAb,SAAd;AACAa,QAAAA,iBAAiB,CAAC,KAAKH,YAAN,CAAjB,CAAqCI,IAArC,CAA0C,UAACC,IAAD,EAAU;AAClD,UAAA,MAAI,CAACH,QAAL,CAAc;AAAEP,YAAAA,IAAI,EAAEU,IAAI,CAACV,IAAb;AAAmBL,YAAAA,SAAS,EAAE;AAA9B,WAAd;;AACA,UAAA,MAAI,CAACY,QAAL,CAAc;AAAEI,YAAAA,UAAU,EAAGD,IAAI,CAACC,UAApB;AAAiChB,YAAAA,SAAS,EAAE;AAA5C,WAAd;;AAEAC,UAAAA,OAAO,CAACC,GAAR,CAAYe,IAAI,CAACC,SAAL,CAAeH,IAAf,EAAoBI,SAApB,EAA8B,IAA9B,CAAZ;AAED,SAND;AAOD;AACF;;;WAEC,2BAAkB;AAChB,UAAI,KAAKrB,KAAL,CAAWE,SAAf,EAA0B;AACxB,eACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEG,MAAM,CAACiB,iBAApB;AAAA,oBACE,KAAC,iBAAD;AAAmB,YAAA,IAAI,EAAC;AAAxB;AADF,UADF;AAMH;AACF;;;;EAhEkBC,KAAK,CAACC,S;;AAkE3B,eAAe1B,MAAf;AAGA,IAAMO,MAAM,GAAGoB,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport axios from 'axios'\nimport { StyleSheet, Text, View } from 'react-native';\n\n// for (let i = 0; i < 150; i++) {\n//   myloop.push(\n//     <View key={i}>\n//     <Text style={{ textAlign: 'center', marginTop: 5 }} >{i}</Text>\n//     </View>\n//   );\n// }\n\n// constructor(props) {\n//   super(props)\n//   this.state = {\n//     game_indices: [],\n//   }\n//   pokemon={this.state.city}\n\n//   var myloop = [];\n\n// for (let i = 0; i < 150; i++) {\n//   myloop.push(\n//     <View key={i}>\n//     <Text style={{ textAlign: 'center', marginTop: 5 }} >{i}</Text>\n//     </View>\n//   );\n// }\n\nclass Search extends React.Component {\n\n\n\n  render() {\n    console.log('RENDER')\n    return (\n      <View style={styles.main_container}>\n        <Text>\n\n        </Text>\n      \n        {/* <CityDescription city={this.state.city} ephemeride={this.state.ephemeride} /> */}\n        {/* forecast={this.state.forecast} */}\n      \n        <FlatList\n          data={this.state.city}\n          keyExtractor={(item) => item.insee}\n          renderItem={({ item }) => <CityDescription city={item} />}\n          />\n      { this._displayLoading() }\n      </View>\n      \n    )\n  }\n  constructor(props) {\n    super(props)\n    this.state = {\n      cities: [],\n      isLoading: false // Par défaut à false car il n'y a pas de chargement tant qu'on ne lance pas de recherche\n    }\n    \n  }\n\n  // Nouvelle méthode\n  _searchTextInputChanged(text) {\n    this.searchedText = text // Modification du texte recherché à chaque saisie de texte, sans passer par setState\n  }\n\n // Bien noter les deux setState\n //   isLoading: True puis appel API puis lorsque l'API a répondu isLoading: False\n _loadCities() {\n    if (this.state.isLoading) return\n    if (this.searchedText.length > 0) {\n      this.setState({ isLoading: true })\n      getPOkemonFromApi(this.searchedText).then((data) => {\n        this.setState({ city: data.city, isLoading: false });\n        this.setState({ ephemeride : data.ephemeride , isLoading: false });\n        // this.setState({ forecast : data.forecast , isLoading: false });\n        console.log(JSON.stringify(data,undefined,true))\n\n      });\n    }\n  }\n\n    _displayLoading() {\n      if (this.state.isLoading) {\n        return (\n          <View style={styles.loading_container}>\n            <ActivityIndicator size='large' />\n          {/* Le component ActivityIndicator possède une propriété size pour définir la taille du visuel de chargement : small ou large. Par défaut size vaut small, on met donc large pour que le chargement soit bien visible */}\n          </View>\n      )\n    }\n  }\n}\nexport default Search\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n}\n)\n"]},"metadata":{},"sourceType":"module"}